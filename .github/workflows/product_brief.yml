name: Build LaTeX PDF from README

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-doc:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r software/documentation/requirements.txt

    - name: Install LaTeX and Ghostscript
      run: |
        sudo apt-get update
        sudo apt-get install -y texlive-latex-extra texlive-fonts-recommended texlive-lang-english ghostscript

    - name: Validate README content
      run: python test_readme.py
      working-directory: software/documentation
      
    - name: Copy and rename hardware images for documentation
      run: |
        mkdir -p software/documentation/images

        # Buscar y copiar dimension
        file=$(ls hardware/resources/unit_dimension_*.png 2>/dev/null | head -n1)
        if [ -n "$file" ]; then cp "$file" software/documentation/images/dimension.png; else echo "dimension not found"; fi

        # Buscar y copiar pinout
        file=$(ls hardware/resources/unit_pinout_*.png 2>/dev/null | head -n1)
        if [ -n "$file" ]; then cp "$file" software/documentation/images/pinout.png; else echo "pinout not found"; fi

        # Buscar y copiar top
        file=$(ls hardware/resources/unit_top_*.png 2>/dev/null | head -n1)
        if [ -n "$file" ]; then cp "$file" software/documentation/images/top.png; else echo "top not found"; fi

    - name: Generate LaTeX PDF
      run: python generate_pdf.py
      working-directory: software/documentation

      
    - name: Compress PDF with Ghostscript (balanced quality)
      run: |
        original_pdf=$(ls build/*.pdf | head -n1)
        repo_name=${{ github.event.repository.name }}
        output_name="${repo_name}_product_brief.pdf"
        gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer \
           -dNOPAUSE -dQUIET -dBATCH \
           -sOutputFile=build/compressed.pdf "$original_pdf"
        mv build/compressed.pdf "build/$output_name"
        echo "PDF final: $output_name"
      working-directory: software/documentation


    - name: List final PDF
      run: ls -lh software/documentation/build

    - name: Scan PDF for secrets
      run: |
        if grep -aEi 'AKIA|api[_-]?key|secret|token|Authorization|password' software/documentation/build/*.pdf; then
          echo " Potential secret detected in PDF"
          exit 1
        fi

    - name: Move PDF to root docs/ for GitHub Pages
      run: |
        mkdir -p docs
        cp software/documentation/build/unit_product_brief.pdf docs/

    - name: Commit and push PDF to docs/ (only on main)
      if: github.ref == 'refs/heads/main'
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git pull origin main
        git add docs/unit_product_brief.pdf
        git commit -m "Publish compressed PDF [skip ci]" || echo "No changes to commit"
        git push origin main
